@[Link(ldflags: "-L/usr/lib/llvm-7/lib  -lLLVM-7  ")]
lib LibLLVM_C
  fun install_fatal_error_handler = LLVMInstallFatalErrorHandler(handler : FatalErrorHandler)
  alias FatalErrorHandler = (LibC::Char* -> Void)
  fun reset_fatal_error_handler = LLVMResetFatalErrorHandler
  fun enable_pretty_stack_trace = LLVMEnablePrettyStackTrace
  alias OpaqueMemoryBuffer = Void
  alias OpaqueContext = Void
  alias OpaqueModule = Void
  alias OpaqueType = Void
  alias OpaqueValue = Void
  alias OpaqueBasicBlock = Void
  alias OpaqueMetadata = Void
  alias OpaqueBuilder = Void
  alias OpaqueDiBuilder = Void
  alias OpaqueModuleProvider = Void
  alias OpaquePassManager = Void
  alias OpaquePassRegistry = Void
  alias OpaqueUse = Void
  alias OpaqueAttributeRef = Void
  alias OpaqueDiagnosticInfo = Void
  alias Comdat = Void
  alias OpaqueModuleFlagEntry = Void
  alias OpaqueJitEventListener = Void
  Ret = 1_i64
  Br = 2_i64
  Switch = 3_i64
  IndirectBr = 4_i64
  Invoke = 5_i64
  Unreachable = 7_i64
  Add = 8_i64
  FAdd = 9_i64
  Sub = 10_i64
  FSub = 11_i64
  Mul = 12_i64
  FMul = 13_i64
  UDiv = 14_i64
  SDiv = 15_i64
  FDiv = 16_i64
  URem = 17_i64
  SRem = 18_i64
  FRem = 19_i64
  Shl = 20_i64
  LShr = 21_i64
  AShr = 22_i64
  And = 23_i64
  Or = 24_i64
  Xor = 25_i64
  Alloca = 26_i64
  Load = 27_i64
  Store = 28_i64
  GetElementPtr = 29_i64
  Trunc = 30_i64
  ZExt = 31_i64
  SExt = 32_i64
  FpToUi = 33_i64
  FpToSi = 34_i64
  UiToFp = 35_i64
  SiToFp = 36_i64
  FpTrunc = 37_i64
  FpExt = 38_i64
  PtrToInt = 39_i64
  IntToPtr = 40_i64
  BitCast = 41_i64
  AddrSpaceCast = 60_i64
  ICmp = 42_i64
  FCmp = 43_i64
  Phi = 44_i64
  Call = 45_i64
  Select = 46_i64
  UserOp1 = 47_i64
  UserOp2 = 48_i64
  VaArg = 49_i64
  ExtractElement = 50_i64
  InsertElement = 51_i64
  ShuffleVector = 52_i64
  ExtractValue = 53_i64
  InsertValue = 54_i64
  Fence = 55_i64
  AtomicCmpXchg = 56_i64
  AtomicRmw = 57_i64
  Resume = 58_i64
  LandingPad = 59_i64
  CleanupRet = 61_i64
  CatchRet = 62_i64
  CatchPad = 63_i64
  CleanupPad = 64_i64
  CatchSwitch = 65_i64
  VoidTypeKind = 0_i64
  HalfTypeKind = 1_i64
  FloatTypeKind = 2_i64
  DoubleTypeKind = 3_i64
  X86Fp80TypeKind = 4_i64
  Fp128TypeKind = 5_i64
  PpcFp128TypeKind = 6_i64
  LabelTypeKind = 7_i64
  IntegerTypeKind = 8_i64
  FunctionTypeKind = 9_i64
  StructTypeKind = 10_i64
  ArrayTypeKind = 11_i64
  PointerTypeKind = 12_i64
  VectorTypeKind = 13_i64
  MetadataTypeKind = 14_i64
  X86MmxTypeKind = 15_i64
  TokenTypeKind = 16_i64
  ExternalLinkage = 0_i64
  AvailableExternallyLinkage = 1_i64
  LinkOnceAnyLinkage = 2_i64
  LinkOnceOdrLinkage = 3_i64
  LinkOnceOdrAutoHideLinkage = 4_i64
  WeakAnyLinkage = 5_i64
  WeakOdrLinkage = 6_i64
  AppendingLinkage = 7_i64
  InternalLinkage = 8_i64
  PrivateLinkage = 9_i64
  DllImportLinkage = 10_i64
  DllExportLinkage = 11_i64
  ExternalWeakLinkage = 12_i64
  GhostLinkage = 13_i64
  CommonLinkage = 14_i64
  LinkerPrivateLinkage = 15_i64
  LinkerPrivateWeakLinkage = 16_i64
  DefaultVisibility = 0_i64
  HiddenVisibility = 1_i64
  ProtectedVisibility = 2_i64
  NoUnnamedAddr = 0_i64
  LocalUnnamedAddr = 1_i64
  GlobalUnnamedAddr = 2_i64
  DefaultStorageClass = 0_i64
  DllImportStorageClass = 1_i64
  DllExportStorageClass = 2_i64
  CCallConv = 0_i64
  FastCallConv = 8_i64
  ColdCallConv = 9_i64
  GhcCallConv = 10_i64
  HiPeCallConv = 11_i64
  WebKitJsCallConv = 12_i64
  AnyRegCallConv = 13_i64
  PreserveMostCallConv = 14_i64
  PreserveAllCallConv = 15_i64
  SwiftCallConv = 16_i64
  CxxfasttlsCallConv = 17_i64
  X86StdcallCallConv = 64_i64
  X86FastcallCallConv = 65_i64
  ArmapcsCallConv = 66_i64
  ArmaapcsCallConv = 67_i64
  ArmaapcsvfpCallConv = 68_i64
  Msp430IntrCallConv = 69_i64
  X86ThisCallCallConv = 70_i64
  PtxKernelCallConv = 71_i64
  PtxDeviceCallConv = 72_i64
  SpirfuncCallConv = 75_i64
  SpirkernelCallConv = 76_i64
  IntelOclbiCallConv = 77_i64
  X8664SysVCallConv = 78_i64
  Win64CallConv = 79_i64
  X86VectorCallCallConv = 80_i64
  HhvmCallConv = 81_i64
  HhvmcCallConv = 82_i64
  X86IntrCallConv = 83_i64
  AvrintrCallConv = 84_i64
  AvrsignalCallConv = 85_i64
  AvrbuiltinCallConv = 86_i64
  AmdgpuvsCallConv = 87_i64
  AmdgpugsCallConv = 88_i64
  AmdgpupsCallConv = 89_i64
  AmdgpucsCallConv = 90_i64
  AmdgpukernelCallConv = 91_i64
  X86RegCallCallConv = 92_i64
  AmdgpuhsCallConv = 93_i64
  Msp430BuiltinCallConv = 94_i64
  AmdgpulsCallConv = 95_i64
  AmdgpuesCallConv = 96_i64
  ArgumentValueKind = 0_i64
  BasicBlockValueKind = 1_i64
  MemoryUseValueKind = 2_i64
  MemoryDefValueKind = 3_i64
  MemoryPhiValueKind = 4_i64
  FunctionValueKind = 5_i64
  GlobalAliasValueKind = 6_i64
  GlobalIFuncValueKind = 7_i64
  GlobalVariableValueKind = 8_i64
  BlockAddressValueKind = 9_i64
  ConstantExprValueKind = 10_i64
  ConstantArrayValueKind = 11_i64
  ConstantStructValueKind = 12_i64
  ConstantVectorValueKind = 13_i64
  UndefValueValueKind = 14_i64
  ConstantAggregateZeroValueKind = 15_i64
  ConstantDataArrayValueKind = 16_i64
  ConstantDataVectorValueKind = 17_i64
  ConstantIntValueKind = 18_i64
  ConstantFpValueKind = 19_i64
  ConstantPointerNullValueKind = 20_i64
  ConstantTokenNoneValueKind = 21_i64
  MetadataAsValueValueKind = 22_i64
  InlineAsmValueKind = 23_i64
  InstructionValueKind = 24_i64
  IntEq = 32_i64
  IntNe = 33_i64
  IntUgt = 34_i64
  IntUge = 35_i64
  IntUlt = 36_i64
  IntUle = 37_i64
  IntSgt = 38_i64
  IntSge = 39_i64
  IntSlt = 40_i64
  IntSle = 41_i64
  RealPredicateFalse = 0_i64
  RealOeq = 1_i64
  RealOgt = 2_i64
  RealOge = 3_i64
  RealOlt = 4_i64
  RealOle = 5_i64
  RealOne = 6_i64
  RealOrd = 7_i64
  RealUno = 8_i64
  RealUeq = 9_i64
  RealUgt = 10_i64
  RealUge = 11_i64
  RealUlt = 12_i64
  RealUle = 13_i64
  RealUne = 14_i64
  RealPredicateTrue = 15_i64
  LandingPadCatch = 0_i64
  LandingPadFilter = 1_i64
  NotThreadLocal = 0_i64
  GeneralDynamicTlsModel = 1_i64
  LocalDynamicTlsModel = 2_i64
  InitialExecTlsModel = 3_i64
  LocalExecTlsModel = 4_i64
  AtomicOrderingNotAtomic = 0_i64
  AtomicOrderingUnordered = 1_i64
  AtomicOrderingMonotonic = 2_i64
  AtomicOrderingAcquire = 4_i64
  AtomicOrderingRelease = 5_i64
  AtomicOrderingAcquireRelease = 6_i64
  AtomicOrderingSequentiallyConsistent = 7_i64
  AtomicRmwBinOpXchg = 0_i64
  AtomicRmwBinOpAdd = 1_i64
  AtomicRmwBinOpSub = 2_i64
  AtomicRmwBinOpAnd = 3_i64
  AtomicRmwBinOpNand = 4_i64
  AtomicRmwBinOpOr = 5_i64
  AtomicRmwBinOpXor = 6_i64
  AtomicRmwBinOpMax = 7_i64
  AtomicRmwBinOpMin = 8_i64
  AtomicRmwBinOpUMax = 9_i64
  AtomicRmwBinOpUMin = 10_i64
  DsError = 0_i64
  DsWarning = 1_i64
  DsRemark = 2_i64
  DsNote = 3_i64
  InlineAsmDialectAtt = 0_i64
  InlineAsmDialectIntel = 1_i64
  ModuleFlagBehaviorError = 0_i64
  ModuleFlagBehaviorWarning = 1_i64
  ModuleFlagBehaviorRequire = 2_i64
  ModuleFlagBehaviorOverride = 3_i64
  ModuleFlagBehaviorAppend = 4_i64
  ModuleFlagBehaviorAppendUnique = 5_i64
  AttributeReturnIndex = 0_i64
  AttributeFunctionIndex = -1_i64
  fun initialize_core = LLVMInitializeCore(r : PassRegistryRef)
  type PassRegistryRef = Void*
  fun shutdown = LLVMShutdown
  fun create_message = LLVMCreateMessage(message : LibC::Char*) : LibC::Char*
  fun dispose_message = LLVMDisposeMessage(message : LibC::Char*)
  fun context_create = LLVMContextCreate : ContextRef
  type ContextRef = Void*
  fun get_global_context = LLVMGetGlobalContext : ContextRef
  fun context_set_diagnostic_handler = LLVMContextSetDiagnosticHandler(c : ContextRef, handler : DiagnosticHandler, diagnostic_context : Void*)
  type DiagnosticInfoRef = Void*
  alias DiagnosticHandler = (DiagnosticInfoRef, Void* -> Void)
  fun context_get_diagnostic_handler = LLVMContextGetDiagnosticHandler(c : ContextRef) : DiagnosticHandler
  fun context_get_diagnostic_context = LLVMContextGetDiagnosticContext(c : ContextRef) : Void*
  fun context_set_yield_callback = LLVMContextSetYieldCallback(c : ContextRef, callback : YieldCallback, opaque_handle : Void*)
  alias YieldCallback = (ContextRef, Void* -> Void)
  fun context_dispose = LLVMContextDispose(c : ContextRef)
  fun get_diag_info_description = LLVMGetDiagInfoDescription(di : DiagnosticInfoRef) : LibC::Char*
  fun get_diag_info_severity = LLVMGetDiagInfoSeverity(di : DiagnosticInfoRef) : DiagnosticSeverity
  enum DiagnosticSeverity
    DsError = 0
    DsWarning = 1
    DsRemark = 2
    DsNote = 3
  end
  fun get_md_kind_id_in_context = LLVMGetMDKindIDInContext(c : ContextRef, name : LibC::Char*, s_len : LibC::UInt) : LibC::UInt
  fun get_md_kind_id = LLVMGetMDKindID(name : LibC::Char*, s_len : LibC::UInt) : LibC::UInt
  fun get_enum_attribute_kind_for_name = LLVMGetEnumAttributeKindForName(name : LibC::Char*, s_len : LibC::SizeT) : LibC::UInt
  fun get_last_enum_attribute_kind = LLVMGetLastEnumAttributeKind : LibC::UInt
  fun create_enum_attribute = LLVMCreateEnumAttribute(c : ContextRef, kind_id : LibC::UInt, val : Uint64T) : AttributeRef
  alias X__Uint64T = LibC::ULong
  alias Uint64T = X__Uint64T
  type AttributeRef = Void*
  fun get_enum_attribute_kind = LLVMGetEnumAttributeKind(a : AttributeRef) : LibC::UInt
  fun get_enum_attribute_value = LLVMGetEnumAttributeValue(a : AttributeRef) : Uint64T
  fun create_string_attribute = LLVMCreateStringAttribute(c : ContextRef, k : LibC::Char*, k_length : LibC::UInt, v : LibC::Char*, v_length : LibC::UInt) : AttributeRef
  fun get_string_attribute_kind = LLVMGetStringAttributeKind(a : AttributeRef, length : LibC::UInt*) : LibC::Char*
  fun get_string_attribute_value = LLVMGetStringAttributeValue(a : AttributeRef, length : LibC::UInt*) : LibC::Char*
  fun is_enum_attribute = LLVMIsEnumAttribute(a : AttributeRef) : Bool
  alias Bool = LibC::Int
  fun is_string_attribute = LLVMIsStringAttribute(a : AttributeRef) : Bool
  fun module_create_with_name = LLVMModuleCreateWithName(module_id : LibC::Char*) : ModuleRef
  type ModuleRef = Void*
  fun module_create_with_name_in_context = LLVMModuleCreateWithNameInContext(module_id : LibC::Char*, c : ContextRef) : ModuleRef
  fun clone_module = LLVMCloneModule(m : ModuleRef) : ModuleRef
  fun dispose_module = LLVMDisposeModule(m : ModuleRef)
  fun get_module_identifier = LLVMGetModuleIdentifier(m : ModuleRef, len : LibC::SizeT*) : LibC::Char*
  fun set_module_identifier = LLVMSetModuleIdentifier(m : ModuleRef, ident : LibC::Char*, len : LibC::SizeT)
  fun get_source_file_name = LLVMGetSourceFileName(m : ModuleRef, len : LibC::SizeT*) : LibC::Char*
  fun set_source_file_name = LLVMSetSourceFileName(m : ModuleRef, name : LibC::Char*, len : LibC::SizeT)
  fun get_data_layout_str = LLVMGetDataLayoutStr(m : ModuleRef) : LibC::Char*
  fun get_data_layout = LLVMGetDataLayout(m : ModuleRef) : LibC::Char*
  fun set_data_layout = LLVMSetDataLayout(m : ModuleRef, data_layout_str : LibC::Char*)
  fun get_target = LLVMGetTarget(m : ModuleRef) : LibC::Char*
  fun set_target = LLVMSetTarget(m : ModuleRef, triple : LibC::Char*)
  fun copy_module_flags_metadata = LLVMCopyModuleFlagsMetadata(m : ModuleRef, len : LibC::SizeT*) : ModuleFlagEntry
  type ModuleFlagEntry = Void*
  fun dispose_module_flags_metadata = LLVMDisposeModuleFlagsMetadata(entries : ModuleFlagEntry)
  fun module_flag_entries_get_flag_behavior = LLVMModuleFlagEntriesGetFlagBehavior(entries : ModuleFlagEntry, index : LibC::UInt) : ModuleFlagBehavior
  enum ModuleFlagBehavior
    ModuleFlagBehaviorError = 0
    ModuleFlagBehaviorWarning = 1
    ModuleFlagBehaviorRequire = 2
    ModuleFlagBehaviorOverride = 3
    ModuleFlagBehaviorAppend = 4
    ModuleFlagBehaviorAppendUnique = 5
  end
  fun module_flag_entries_get_key = LLVMModuleFlagEntriesGetKey(entries : ModuleFlagEntry, index : LibC::UInt, len : LibC::SizeT*) : LibC::Char*
  fun module_flag_entries_get_metadata = LLVMModuleFlagEntriesGetMetadata(entries : ModuleFlagEntry, index : LibC::UInt) : MetadataRef
  type MetadataRef = Void*
  fun get_module_flag = LLVMGetModuleFlag(m : ModuleRef, key : LibC::Char*, key_len : LibC::SizeT) : MetadataRef
  fun add_module_flag = LLVMAddModuleFlag(m : ModuleRef, behavior : ModuleFlagBehavior, key : LibC::Char*, key_len : LibC::SizeT, val : MetadataRef)
  fun dump_module = LLVMDumpModule(m : ModuleRef)
  fun print_module_to_file = LLVMPrintModuleToFile(m : ModuleRef, filename : LibC::Char*, error_message : LibC::Char**) : Bool
  fun print_module_to_string = LLVMPrintModuleToString(m : ModuleRef) : LibC::Char*
  fun get_module_inline_asm = LLVMGetModuleInlineAsm(m : ModuleRef, len : LibC::SizeT*) : LibC::Char*
  fun set_module_inline_asm2 = LLVMSetModuleInlineAsm2(m : ModuleRef, asm : LibC::Char*, len : LibC::SizeT)
  fun append_module_inline_asm = LLVMAppendModuleInlineAsm(m : ModuleRef, asm : LibC::Char*, len : LibC::SizeT)
  fun get_inline_asm = LLVMGetInlineAsm(ty : TypeRef, asm_string : LibC::Char*, asm_string_size : LibC::SizeT, constraints : LibC::Char*, constraints_size : LibC::SizeT, has_side_effects : Bool, is_align_stack : Bool, dialect : InlineAsmDialect) : ValueRef
  type TypeRef = Void*
  enum InlineAsmDialect
    InlineAsmDialectAtt = 0
    InlineAsmDialectIntel = 1
  end
  type ValueRef = Void*
  fun get_module_context = LLVMGetModuleContext(m : ModuleRef) : ContextRef
  fun get_type_by_name = LLVMGetTypeByName(m : ModuleRef, name : LibC::Char*) : TypeRef
  fun get_named_metadata_num_operands = LLVMGetNamedMetadataNumOperands(m : ModuleRef, name : LibC::Char*) : LibC::UInt
  fun get_named_metadata_operands = LLVMGetNamedMetadataOperands(m : ModuleRef, name : LibC::Char*, dest : ValueRef*)
  fun add_named_metadata_operand = LLVMAddNamedMetadataOperand(m : ModuleRef, name : LibC::Char*, val : ValueRef)
  fun add_function = LLVMAddFunction(m : ModuleRef, name : LibC::Char*, function_ty : TypeRef) : ValueRef
  fun get_named_function = LLVMGetNamedFunction(m : ModuleRef, name : LibC::Char*) : ValueRef
  fun get_first_function = LLVMGetFirstFunction(m : ModuleRef) : ValueRef
  fun get_last_function = LLVMGetLastFunction(m : ModuleRef) : ValueRef
  fun get_next_function = LLVMGetNextFunction(fn : ValueRef) : ValueRef
  fun get_previous_function = LLVMGetPreviousFunction(fn : ValueRef) : ValueRef
  fun set_module_inline_asm = LLVMSetModuleInlineAsm(m : ModuleRef, asm : LibC::Char*)
  fun get_type_kind = LLVMGetTypeKind(ty : TypeRef) : TypeKind
  enum TypeKind
    VoidTypeKind = 0
    HalfTypeKind = 1
    FloatTypeKind = 2
    DoubleTypeKind = 3
    X86Fp80TypeKind = 4
    Fp128TypeKind = 5
    PpcFp128TypeKind = 6
    LabelTypeKind = 7
    IntegerTypeKind = 8
    FunctionTypeKind = 9
    StructTypeKind = 10
    ArrayTypeKind = 11
    PointerTypeKind = 12
    VectorTypeKind = 13
    MetadataTypeKind = 14
    X86MmxTypeKind = 15
    TokenTypeKind = 16
  end
  fun type_is_sized = LLVMTypeIsSized(ty : TypeRef) : Bool
  fun get_type_context = LLVMGetTypeContext(ty : TypeRef) : ContextRef
  fun dump_type = LLVMDumpType(val : TypeRef)
  fun print_type_to_string = LLVMPrintTypeToString(val : TypeRef) : LibC::Char*
  fun int1_type_in_context = LLVMInt1TypeInContext(c : ContextRef) : TypeRef
  fun int8_type_in_context = LLVMInt8TypeInContext(c : ContextRef) : TypeRef
  fun int16_type_in_context = LLVMInt16TypeInContext(c : ContextRef) : TypeRef
  fun int32_type_in_context = LLVMInt32TypeInContext(c : ContextRef) : TypeRef
  fun int64_type_in_context = LLVMInt64TypeInContext(c : ContextRef) : TypeRef
  fun int128_type_in_context = LLVMInt128TypeInContext(c : ContextRef) : TypeRef
  fun int_type_in_context = LLVMIntTypeInContext(c : ContextRef, num_bits : LibC::UInt) : TypeRef
  fun int1_type = LLVMInt1Type : TypeRef
  fun int8_type = LLVMInt8Type : TypeRef
  fun int16_type = LLVMInt16Type : TypeRef
  fun int32_type = LLVMInt32Type : TypeRef
  fun int64_type = LLVMInt64Type : TypeRef
  fun int128_type = LLVMInt128Type : TypeRef
  fun int_type = LLVMIntType(num_bits : LibC::UInt) : TypeRef
  fun get_int_type_width = LLVMGetIntTypeWidth(integer_ty : TypeRef) : LibC::UInt
  fun half_type_in_context = LLVMHalfTypeInContext(c : ContextRef) : TypeRef
  fun float_type_in_context = LLVMFloatTypeInContext(c : ContextRef) : TypeRef
  fun double_type_in_context = LLVMDoubleTypeInContext(c : ContextRef) : TypeRef
  fun x86_fp80_type_in_context = LLVMX86FP80TypeInContext(c : ContextRef) : TypeRef
  fun fp128_type_in_context = LLVMFP128TypeInContext(c : ContextRef) : TypeRef
  fun ppcfp128_type_in_context = LLVMPPCFP128TypeInContext(c : ContextRef) : TypeRef
  fun half_type = LLVMHalfType : TypeRef
  fun float_type = LLVMFloatType : TypeRef
  fun double_type = LLVMDoubleType : TypeRef
  fun x86_fp80_type = LLVMX86FP80Type : TypeRef
  fun fp128_type = LLVMFP128Type : TypeRef
  fun ppcfp128_type = LLVMPPCFP128Type : TypeRef
  fun function_type = LLVMFunctionType(return_type : TypeRef, param_types : TypeRef*, param_count : LibC::UInt, is_var_arg : Bool) : TypeRef
  fun is_function_var_arg = LLVMIsFunctionVarArg(function_ty : TypeRef) : Bool
  fun get_return_type = LLVMGetReturnType(function_ty : TypeRef) : TypeRef
  fun count_param_types = LLVMCountParamTypes(function_ty : TypeRef) : LibC::UInt
  fun get_param_types = LLVMGetParamTypes(function_ty : TypeRef, dest : TypeRef*)
  fun struct_type_in_context = LLVMStructTypeInContext(c : ContextRef, element_types : TypeRef*, element_count : LibC::UInt, packed : Bool) : TypeRef
  fun struct_type = LLVMStructType(element_types : TypeRef*, element_count : LibC::UInt, packed : Bool) : TypeRef
  fun struct_create_named = LLVMStructCreateNamed(c : ContextRef, name : LibC::Char*) : TypeRef
  fun get_struct_name = LLVMGetStructName(ty : TypeRef) : LibC::Char*
  fun struct_set_body = LLVMStructSetBody(struct_ty : TypeRef, element_types : TypeRef*, element_count : LibC::UInt, packed : Bool)
  fun count_struct_element_types = LLVMCountStructElementTypes(struct_ty : TypeRef) : LibC::UInt
  fun get_struct_element_types = LLVMGetStructElementTypes(struct_ty : TypeRef, dest : TypeRef*)
  fun struct_get_type_at_index = LLVMStructGetTypeAtIndex(struct_ty : TypeRef, i : LibC::UInt) : TypeRef
  fun is_packed_struct = LLVMIsPackedStruct(struct_ty : TypeRef) : Bool
  fun is_opaque_struct = LLVMIsOpaqueStruct(struct_ty : TypeRef) : Bool
  fun get_element_type = LLVMGetElementType(ty : TypeRef) : TypeRef
  fun get_subtypes = LLVMGetSubtypes(tp : TypeRef, arr : TypeRef*)
  fun get_num_contained_types = LLVMGetNumContainedTypes(tp : TypeRef) : LibC::UInt
  fun array_type = LLVMArrayType(element_type : TypeRef, element_count : LibC::UInt) : TypeRef
  fun get_array_length = LLVMGetArrayLength(array_ty : TypeRef) : LibC::UInt
  fun pointer_type = LLVMPointerType(element_type : TypeRef, address_space : LibC::UInt) : TypeRef
  fun get_pointer_address_space = LLVMGetPointerAddressSpace(pointer_ty : TypeRef) : LibC::UInt
  fun vector_type = LLVMVectorType(element_type : TypeRef, element_count : LibC::UInt) : TypeRef
  fun get_vector_size = LLVMGetVectorSize(vector_ty : TypeRef) : LibC::UInt
  fun void_type_in_context = LLVMVoidTypeInContext(c : ContextRef) : TypeRef
  fun label_type_in_context = LLVMLabelTypeInContext(c : ContextRef) : TypeRef
  fun x86_mmx_type_in_context = LLVMX86MMXTypeInContext(c : ContextRef) : TypeRef
  fun token_type_in_context = LLVMTokenTypeInContext(c : ContextRef) : TypeRef
  fun metadata_type_in_context = LLVMMetadataTypeInContext(c : ContextRef) : TypeRef
  fun void_type = LLVMVoidType : TypeRef
  fun label_type = LLVMLabelType : TypeRef
  fun x86_mmx_type = LLVMX86MMXType : TypeRef
  fun type_of = LLVMTypeOf(val : ValueRef) : TypeRef
  fun get_value_kind = LLVMGetValueKind(val : ValueRef) : ValueKind
  enum ValueKind
    ArgumentValueKind = 0
    BasicBlockValueKind = 1
    MemoryUseValueKind = 2
    MemoryDefValueKind = 3
    MemoryPhiValueKind = 4
    FunctionValueKind = 5
    GlobalAliasValueKind = 6
    GlobalIFuncValueKind = 7
    GlobalVariableValueKind = 8
    BlockAddressValueKind = 9
    ConstantExprValueKind = 10
    ConstantArrayValueKind = 11
    ConstantStructValueKind = 12
    ConstantVectorValueKind = 13
    UndefValueValueKind = 14
    ConstantAggregateZeroValueKind = 15
    ConstantDataArrayValueKind = 16
    ConstantDataVectorValueKind = 17
    ConstantIntValueKind = 18
    ConstantFpValueKind = 19
    ConstantPointerNullValueKind = 20
    ConstantTokenNoneValueKind = 21
    MetadataAsValueValueKind = 22
    InlineAsmValueKind = 23
    InstructionValueKind = 24
  end
  fun get_value_name2 = LLVMGetValueName2(val : ValueRef, length : LibC::SizeT*) : LibC::Char*
  fun set_value_name2 = LLVMSetValueName2(val : ValueRef, name : LibC::Char*, name_len : LibC::SizeT)
  fun dump_value = LLVMDumpValue(val : ValueRef)
  fun print_value_to_string = LLVMPrintValueToString(val : ValueRef) : LibC::Char*
  fun replace_all_uses_with = LLVMReplaceAllUsesWith(old_val : ValueRef, new_val : ValueRef)
  fun is_constant = LLVMIsConstant(val : ValueRef) : Bool
  fun is_undef = LLVMIsUndef(val : ValueRef) : Bool
  fun is_a_argument = LLVMIsAArgument(val : ValueRef) : ValueRef
  fun is_a_basic_block = LLVMIsABasicBlock(val : ValueRef) : ValueRef
  fun is_a_inline_asm = LLVMIsAInlineAsm(val : ValueRef) : ValueRef
  fun is_a_user = LLVMIsAUser(val : ValueRef) : ValueRef
  fun is_a_constant = LLVMIsAConstant(val : ValueRef) : ValueRef
  fun is_a_block_address = LLVMIsABlockAddress(val : ValueRef) : ValueRef
  fun is_a_constant_aggregate_zero = LLVMIsAConstantAggregateZero(val : ValueRef) : ValueRef
  fun is_a_constant_array = LLVMIsAConstantArray(val : ValueRef) : ValueRef
  fun is_a_constant_data_sequential = LLVMIsAConstantDataSequential(val : ValueRef) : ValueRef
  fun is_a_constant_data_array = LLVMIsAConstantDataArray(val : ValueRef) : ValueRef
  fun is_a_constant_data_vector = LLVMIsAConstantDataVector(val : ValueRef) : ValueRef
  fun is_a_constant_expr = LLVMIsAConstantExpr(val : ValueRef) : ValueRef
  fun is_a_constant_fp = LLVMIsAConstantFP(val : ValueRef) : ValueRef
  fun is_a_constant_int = LLVMIsAConstantInt(val : ValueRef) : ValueRef
  fun is_a_constant_pointer_null = LLVMIsAConstantPointerNull(val : ValueRef) : ValueRef
  fun is_a_constant_struct = LLVMIsAConstantStruct(val : ValueRef) : ValueRef
  fun is_a_constant_token_none = LLVMIsAConstantTokenNone(val : ValueRef) : ValueRef
  fun is_a_constant_vector = LLVMIsAConstantVector(val : ValueRef) : ValueRef
  fun is_a_global_value = LLVMIsAGlobalValue(val : ValueRef) : ValueRef
  fun is_a_global_alias = LLVMIsAGlobalAlias(val : ValueRef) : ValueRef
  fun is_a_global_object = LLVMIsAGlobalObject(val : ValueRef) : ValueRef
  fun is_a_function = LLVMIsAFunction(val : ValueRef) : ValueRef
  fun is_a_global_variable = LLVMIsAGlobalVariable(val : ValueRef) : ValueRef
  fun is_a_undef_value = LLVMIsAUndefValue(val : ValueRef) : ValueRef
  fun is_a_instruction = LLVMIsAInstruction(val : ValueRef) : ValueRef
  fun is_a_binary_operator = LLVMIsABinaryOperator(val : ValueRef) : ValueRef
  fun is_a_call_inst = LLVMIsACallInst(val : ValueRef) : ValueRef
  fun is_a_intrinsic_inst = LLVMIsAIntrinsicInst(val : ValueRef) : ValueRef
  fun is_a_dbg_info_intrinsic = LLVMIsADbgInfoIntrinsic(val : ValueRef) : ValueRef
  fun is_a_dbg_declare_inst = LLVMIsADbgDeclareInst(val : ValueRef) : ValueRef
  fun is_a_mem_intrinsic = LLVMIsAMemIntrinsic(val : ValueRef) : ValueRef
  fun is_a_mem_cpy_inst = LLVMIsAMemCpyInst(val : ValueRef) : ValueRef
  fun is_a_mem_move_inst = LLVMIsAMemMoveInst(val : ValueRef) : ValueRef
  fun is_a_mem_set_inst = LLVMIsAMemSetInst(val : ValueRef) : ValueRef
  fun is_a_cmp_inst = LLVMIsACmpInst(val : ValueRef) : ValueRef
  fun is_af_cmp_inst = LLVMIsAFCmpInst(val : ValueRef) : ValueRef
  fun is_ai_cmp_inst = LLVMIsAICmpInst(val : ValueRef) : ValueRef
  fun is_a_extract_element_inst = LLVMIsAExtractElementInst(val : ValueRef) : ValueRef
  fun is_a_get_element_ptr_inst = LLVMIsAGetElementPtrInst(val : ValueRef) : ValueRef
  fun is_a_insert_element_inst = LLVMIsAInsertElementInst(val : ValueRef) : ValueRef
  fun is_a_insert_value_inst = LLVMIsAInsertValueInst(val : ValueRef) : ValueRef
  fun is_a_landing_pad_inst = LLVMIsALandingPadInst(val : ValueRef) : ValueRef
  fun is_aphi_node = LLVMIsAPHINode(val : ValueRef) : ValueRef
  fun is_a_select_inst = LLVMIsASelectInst(val : ValueRef) : ValueRef
  fun is_a_shuffle_vector_inst = LLVMIsAShuffleVectorInst(val : ValueRef) : ValueRef
  fun is_a_store_inst = LLVMIsAStoreInst(val : ValueRef) : ValueRef
  fun is_a_terminator_inst = LLVMIsATerminatorInst(val : ValueRef) : ValueRef
  fun is_a_branch_inst = LLVMIsABranchInst(val : ValueRef) : ValueRef
  fun is_a_indirect_br_inst = LLVMIsAIndirectBrInst(val : ValueRef) : ValueRef
  fun is_a_invoke_inst = LLVMIsAInvokeInst(val : ValueRef) : ValueRef
  fun is_a_return_inst = LLVMIsAReturnInst(val : ValueRef) : ValueRef
  fun is_a_switch_inst = LLVMIsASwitchInst(val : ValueRef) : ValueRef
  fun is_a_unreachable_inst = LLVMIsAUnreachableInst(val : ValueRef) : ValueRef
  fun is_a_resume_inst = LLVMIsAResumeInst(val : ValueRef) : ValueRef
  fun is_a_cleanup_return_inst = LLVMIsACleanupReturnInst(val : ValueRef) : ValueRef
  fun is_a_catch_return_inst = LLVMIsACatchReturnInst(val : ValueRef) : ValueRef
  fun is_a_funclet_pad_inst = LLVMIsAFuncletPadInst(val : ValueRef) : ValueRef
  fun is_a_catch_pad_inst = LLVMIsACatchPadInst(val : ValueRef) : ValueRef
  fun is_a_cleanup_pad_inst = LLVMIsACleanupPadInst(val : ValueRef) : ValueRef
  fun is_a_unary_instruction = LLVMIsAUnaryInstruction(val : ValueRef) : ValueRef
  fun is_a_alloca_inst = LLVMIsAAllocaInst(val : ValueRef) : ValueRef
  fun is_a_cast_inst = LLVMIsACastInst(val : ValueRef) : ValueRef
  fun is_a_addr_space_cast_inst = LLVMIsAAddrSpaceCastInst(val : ValueRef) : ValueRef
  fun is_a_bit_cast_inst = LLVMIsABitCastInst(val : ValueRef) : ValueRef
  fun is_afp_ext_inst = LLVMIsAFPExtInst(val : ValueRef) : ValueRef
  fun is_afp_to_si_inst = LLVMIsAFPToSIInst(val : ValueRef) : ValueRef
  fun is_afp_to_ui_inst = LLVMIsAFPToUIInst(val : ValueRef) : ValueRef
  fun is_afp_trunc_inst = LLVMIsAFPTruncInst(val : ValueRef) : ValueRef
  fun is_a_int_to_ptr_inst = LLVMIsAIntToPtrInst(val : ValueRef) : ValueRef
  fun is_a_ptr_to_int_inst = LLVMIsAPtrToIntInst(val : ValueRef) : ValueRef
  fun is_as_ext_inst = LLVMIsASExtInst(val : ValueRef) : ValueRef
  fun is_asi_to_fp_inst = LLVMIsASIToFPInst(val : ValueRef) : ValueRef
  fun is_a_trunc_inst = LLVMIsATruncInst(val : ValueRef) : ValueRef
  fun is_aui_to_fp_inst = LLVMIsAUIToFPInst(val : ValueRef) : ValueRef
  fun is_az_ext_inst = LLVMIsAZExtInst(val : ValueRef) : ValueRef
  fun is_a_extract_value_inst = LLVMIsAExtractValueInst(val : ValueRef) : ValueRef
  fun is_a_load_inst = LLVMIsALoadInst(val : ValueRef) : ValueRef
  fun is_ava_arg_inst = LLVMIsAVAArgInst(val : ValueRef) : ValueRef
  fun is_amd_node = LLVMIsAMDNode(val : ValueRef) : ValueRef
  fun is_amd_string = LLVMIsAMDString(val : ValueRef) : ValueRef
  fun get_value_name = LLVMGetValueName(val : ValueRef) : LibC::Char*
  fun set_value_name = LLVMSetValueName(val : ValueRef, name : LibC::Char*)
  fun get_first_use = LLVMGetFirstUse(val : ValueRef) : UseRef
  type UseRef = Void*
  fun get_next_use = LLVMGetNextUse(u : UseRef) : UseRef
  fun get_user = LLVMGetUser(u : UseRef) : ValueRef
  fun get_used_value = LLVMGetUsedValue(u : UseRef) : ValueRef
  fun get_operand = LLVMGetOperand(val : ValueRef, index : LibC::UInt) : ValueRef
  fun get_operand_use = LLVMGetOperandUse(val : ValueRef, index : LibC::UInt) : UseRef
  fun set_operand = LLVMSetOperand(user : ValueRef, index : LibC::UInt, val : ValueRef)
  fun get_num_operands = LLVMGetNumOperands(val : ValueRef) : LibC::Int
  fun const_null = LLVMConstNull(ty : TypeRef) : ValueRef
  fun const_all_ones = LLVMConstAllOnes(ty : TypeRef) : ValueRef
  fun get_undef = LLVMGetUndef(ty : TypeRef) : ValueRef
  fun is_null = LLVMIsNull(val : ValueRef) : Bool
  fun const_pointer_null = LLVMConstPointerNull(ty : TypeRef) : ValueRef
  fun const_int = LLVMConstInt(int_ty : TypeRef, n : LibC::ULongLong, sign_extend : Bool) : ValueRef
  fun const_int_of_arbitrary_precision = LLVMConstIntOfArbitraryPrecision(int_ty : TypeRef, num_words : LibC::UInt, words : Uint64T*) : ValueRef
  fun const_int_of_string = LLVMConstIntOfString(int_ty : TypeRef, text : LibC::Char*, radix : Uint8T) : ValueRef
  alias X__Uint8T = UInt8
  alias Uint8T = X__Uint8T
  fun const_int_of_string_and_size = LLVMConstIntOfStringAndSize(int_ty : TypeRef, text : LibC::Char*, s_len : LibC::UInt, radix : Uint8T) : ValueRef
  fun const_real = LLVMConstReal(real_ty : TypeRef, n : LibC::Double) : ValueRef
  fun const_real_of_string = LLVMConstRealOfString(real_ty : TypeRef, text : LibC::Char*) : ValueRef
  fun const_real_of_string_and_size = LLVMConstRealOfStringAndSize(real_ty : TypeRef, text : LibC::Char*, s_len : LibC::UInt) : ValueRef
  fun const_int_get_z_ext_value = LLVMConstIntGetZExtValue(constant_val : ValueRef) : LibC::ULongLong
  fun const_int_get_s_ext_value = LLVMConstIntGetSExtValue(constant_val : ValueRef) : LibC::LongLong
  fun const_real_get_double = LLVMConstRealGetDouble(constant_val : ValueRef, loses_info : Bool*) : LibC::Double
  fun const_string_in_context = LLVMConstStringInContext(c : ContextRef, str : LibC::Char*, length : LibC::UInt, dont_null_terminate : Bool) : ValueRef
  fun const_string = LLVMConstString(str : LibC::Char*, length : LibC::UInt, dont_null_terminate : Bool) : ValueRef
  fun is_constant_string = LLVMIsConstantString(c : ValueRef) : Bool
  fun get_as_string = LLVMGetAsString(c : ValueRef, length : LibC::SizeT*) : LibC::Char*
  fun const_struct_in_context = LLVMConstStructInContext(c : ContextRef, constant_vals : ValueRef*, count : LibC::UInt, packed : Bool) : ValueRef
  fun const_struct = LLVMConstStruct(constant_vals : ValueRef*, count : LibC::UInt, packed : Bool) : ValueRef
  fun const_array = LLVMConstArray(element_ty : TypeRef, constant_vals : ValueRef*, length : LibC::UInt) : ValueRef
  fun const_named_struct = LLVMConstNamedStruct(struct_ty : TypeRef, constant_vals : ValueRef*, count : LibC::UInt) : ValueRef
  fun get_element_as_constant = LLVMGetElementAsConstant(c : ValueRef, idx : LibC::UInt) : ValueRef
  fun const_vector = LLVMConstVector(scalar_constant_vals : ValueRef*, size : LibC::UInt) : ValueRef
  fun get_const_opcode = LLVMGetConstOpcode(constant_val : ValueRef) : Opcode
  enum Opcode
    Ret = 1
    Br = 2
    Switch = 3
    IndirectBr = 4
    Invoke = 5
    Unreachable = 7
    Add = 8
    FAdd = 9
    Sub = 10
    FSub = 11
    Mul = 12
    FMul = 13
    UDiv = 14
    SDiv = 15
    FDiv = 16
    URem = 17
    SRem = 18
    FRem = 19
    Shl = 20
    LShr = 21
    AShr = 22
    And = 23
    Or = 24
    Xor = 25
    Alloca = 26
    Load = 27
    Store = 28
    GetElementPtr = 29
    Trunc = 30
    ZExt = 31
    SExt = 32
    FpToUi = 33
    FpToSi = 34
    UiToFp = 35
    SiToFp = 36
    FpTrunc = 37
    FpExt = 38
    PtrToInt = 39
    IntToPtr = 40
    BitCast = 41
    AddrSpaceCast = 60
    ICmp = 42
    FCmp = 43
    Phi = 44
    Call = 45
    Select = 46
    UserOp1 = 47
    UserOp2 = 48
    VaArg = 49
    ExtractElement = 50
    InsertElement = 51
    ShuffleVector = 52
    ExtractValue = 53
    InsertValue = 54
    Fence = 55
    AtomicCmpXchg = 56
    AtomicRmw = 57
    Resume = 58
    LandingPad = 59
    CleanupRet = 61
    CatchRet = 62
    CatchPad = 63
    CleanupPad = 64
    CatchSwitch = 65
  end
  fun align_of = LLVMAlignOf(ty : TypeRef) : ValueRef
  fun size_of = LLVMSizeOf(ty : TypeRef) : ValueRef
  fun const_neg = LLVMConstNeg(constant_val : ValueRef) : ValueRef
  fun const_nsw_neg = LLVMConstNSWNeg(constant_val : ValueRef) : ValueRef
  fun const_nuw_neg = LLVMConstNUWNeg(constant_val : ValueRef) : ValueRef
  fun const_f_neg = LLVMConstFNeg(constant_val : ValueRef) : ValueRef
  fun const_not = LLVMConstNot(constant_val : ValueRef) : ValueRef
  fun const_add = LLVMConstAdd(lhs_constant : ValueRef, rhs_constant : ValueRef) : ValueRef
  fun const_nsw_add = LLVMConstNSWAdd(lhs_constant : ValueRef, rhs_constant : ValueRef) : ValueRef
  fun const_nuw_add = LLVMConstNUWAdd(lhs_constant : ValueRef, rhs_constant : ValueRef) : ValueRef
  fun const_f_add = LLVMConstFAdd(lhs_constant : ValueRef, rhs_constant : ValueRef) : ValueRef
  fun const_sub = LLVMConstSub(lhs_constant : ValueRef, rhs_constant : ValueRef) : ValueRef
  fun const_nsw_sub = LLVMConstNSWSub(lhs_constant : ValueRef, rhs_constant : ValueRef) : ValueRef
  fun const_nuw_sub = LLVMConstNUWSub(lhs_constant : ValueRef, rhs_constant : ValueRef) : ValueRef
  fun const_f_sub = LLVMConstFSub(lhs_constant : ValueRef, rhs_constant : ValueRef) : ValueRef
  fun const_mul = LLVMConstMul(lhs_constant : ValueRef, rhs_constant : ValueRef) : ValueRef
  fun const_nsw_mul = LLVMConstNSWMul(lhs_constant : ValueRef, rhs_constant : ValueRef) : ValueRef
  fun const_nuw_mul = LLVMConstNUWMul(lhs_constant : ValueRef, rhs_constant : ValueRef) : ValueRef
  fun const_f_mul = LLVMConstFMul(lhs_constant : ValueRef, rhs_constant : ValueRef) : ValueRef
  fun const_u_div = LLVMConstUDiv(lhs_constant : ValueRef, rhs_constant : ValueRef) : ValueRef
  fun const_exact_u_div = LLVMConstExactUDiv(lhs_constant : ValueRef, rhs_constant : ValueRef) : ValueRef
  fun const_s_div = LLVMConstSDiv(lhs_constant : ValueRef, rhs_constant : ValueRef) : ValueRef
  fun const_exact_s_div = LLVMConstExactSDiv(lhs_constant : ValueRef, rhs_constant : ValueRef) : ValueRef
  fun const_f_div = LLVMConstFDiv(lhs_constant : ValueRef, rhs_constant : ValueRef) : ValueRef
  fun const_u_rem = LLVMConstURem(lhs_constant : ValueRef, rhs_constant : ValueRef) : ValueRef
  fun const_s_rem = LLVMConstSRem(lhs_constant : ValueRef, rhs_constant : ValueRef) : ValueRef
  fun const_f_rem = LLVMConstFRem(lhs_constant : ValueRef, rhs_constant : ValueRef) : ValueRef
  fun const_and = LLVMConstAnd(lhs_constant : ValueRef, rhs_constant : ValueRef) : ValueRef
  fun const_or = LLVMConstOr(lhs_constant : ValueRef, rhs_constant : ValueRef) : ValueRef
  fun const_xor = LLVMConstXor(lhs_constant : ValueRef, rhs_constant : ValueRef) : ValueRef
  fun const_i_cmp = LLVMConstICmp(predicate : IntPredicate, lhs_constant : ValueRef, rhs_constant : ValueRef) : ValueRef
  enum IntPredicate
    IntEq = 32
    IntNe = 33
    IntUgt = 34
    IntUge = 35
    IntUlt = 36
    IntUle = 37
    IntSgt = 38
    IntSge = 39
    IntSlt = 40
    IntSle = 41
  end
  fun const_f_cmp = LLVMConstFCmp(predicate : RealPredicate, lhs_constant : ValueRef, rhs_constant : ValueRef) : ValueRef
  enum RealPredicate
    RealPredicateFalse = 0
    RealOeq = 1
    RealOgt = 2
    RealOge = 3
    RealOlt = 4
    RealOle = 5
    RealOne = 6
    RealOrd = 7
    RealUno = 8
    RealUeq = 9
    RealUgt = 10
    RealUge = 11
    RealUlt = 12
    RealUle = 13
    RealUne = 14
    RealPredicateTrue = 15
  end
  fun const_shl = LLVMConstShl(lhs_constant : ValueRef, rhs_constant : ValueRef) : ValueRef
  fun const_l_shr = LLVMConstLShr(lhs_constant : ValueRef, rhs_constant : ValueRef) : ValueRef
  fun const_a_shr = LLVMConstAShr(lhs_constant : ValueRef, rhs_constant : ValueRef) : ValueRef
  fun const_gep = LLVMConstGEP(constant_val : ValueRef, constant_indices : ValueRef*, num_indices : LibC::UInt) : ValueRef
  fun const_in_bounds_gep = LLVMConstInBoundsGEP(constant_val : ValueRef, constant_indices : ValueRef*, num_indices : LibC::UInt) : ValueRef
  fun const_trunc = LLVMConstTrunc(constant_val : ValueRef, to_type : TypeRef) : ValueRef
  fun const_s_ext = LLVMConstSExt(constant_val : ValueRef, to_type : TypeRef) : ValueRef
  fun const_z_ext = LLVMConstZExt(constant_val : ValueRef, to_type : TypeRef) : ValueRef
  fun const_fp_trunc = LLVMConstFPTrunc(constant_val : ValueRef, to_type : TypeRef) : ValueRef
  fun const_fp_ext = LLVMConstFPExt(constant_val : ValueRef, to_type : TypeRef) : ValueRef
  fun const_ui_to_fp = LLVMConstUIToFP(constant_val : ValueRef, to_type : TypeRef) : ValueRef
  fun const_si_to_fp = LLVMConstSIToFP(constant_val : ValueRef, to_type : TypeRef) : ValueRef
  fun const_fp_to_ui = LLVMConstFPToUI(constant_val : ValueRef, to_type : TypeRef) : ValueRef
  fun const_fp_to_si = LLVMConstFPToSI(constant_val : ValueRef, to_type : TypeRef) : ValueRef
  fun const_ptr_to_int = LLVMConstPtrToInt(constant_val : ValueRef, to_type : TypeRef) : ValueRef
  fun const_int_to_ptr = LLVMConstIntToPtr(constant_val : ValueRef, to_type : TypeRef) : ValueRef
  fun const_bit_cast = LLVMConstBitCast(constant_val : ValueRef, to_type : TypeRef) : ValueRef
  fun const_addr_space_cast = LLVMConstAddrSpaceCast(constant_val : ValueRef, to_type : TypeRef) : ValueRef
  fun const_z_ext_or_bit_cast = LLVMConstZExtOrBitCast(constant_val : ValueRef, to_type : TypeRef) : ValueRef
  fun const_s_ext_or_bit_cast = LLVMConstSExtOrBitCast(constant_val : ValueRef, to_type : TypeRef) : ValueRef
  fun const_trunc_or_bit_cast = LLVMConstTruncOrBitCast(constant_val : ValueRef, to_type : TypeRef) : ValueRef
  fun const_pointer_cast = LLVMConstPointerCast(constant_val : ValueRef, to_type : TypeRef) : ValueRef
  fun const_int_cast = LLVMConstIntCast(constant_val : ValueRef, to_type : TypeRef, is_signed : Bool) : ValueRef
  fun const_fp_cast = LLVMConstFPCast(constant_val : ValueRef, to_type : TypeRef) : ValueRef
  fun const_select = LLVMConstSelect(constant_condition : ValueRef, constant_if_true : ValueRef, constant_if_false : ValueRef) : ValueRef
  fun const_extract_element = LLVMConstExtractElement(vector_constant : ValueRef, index_constant : ValueRef) : ValueRef
  fun const_insert_element = LLVMConstInsertElement(vector_constant : ValueRef, element_value_constant : ValueRef, index_constant : ValueRef) : ValueRef
  fun const_shuffle_vector = LLVMConstShuffleVector(vector_a_constant : ValueRef, vector_b_constant : ValueRef, mask_constant : ValueRef) : ValueRef
  fun const_extract_value = LLVMConstExtractValue(agg_constant : ValueRef, idx_list : LibC::UInt*, num_idx : LibC::UInt) : ValueRef
  fun const_insert_value = LLVMConstInsertValue(agg_constant : ValueRef, element_value_constant : ValueRef, idx_list : LibC::UInt*, num_idx : LibC::UInt) : ValueRef
  fun block_address = LLVMBlockAddress(f : ValueRef, bb : BasicBlockRef) : ValueRef
  type BasicBlockRef = Void*
  fun const_inline_asm = LLVMConstInlineAsm(ty : TypeRef, asm_string : LibC::Char*, constraints : LibC::Char*, has_side_effects : Bool, is_align_stack : Bool) : ValueRef
  fun get_global_parent = LLVMGetGlobalParent(global : ValueRef) : ModuleRef
  fun is_declaration = LLVMIsDeclaration(global : ValueRef) : Bool
  fun get_linkage = LLVMGetLinkage(global : ValueRef) : Linkage
  enum Linkage
    ExternalLinkage = 0
    AvailableExternallyLinkage = 1
    LinkOnceAnyLinkage = 2
    LinkOnceOdrLinkage = 3
    LinkOnceOdrAutoHideLinkage = 4
    WeakAnyLinkage = 5
    WeakOdrLinkage = 6
    AppendingLinkage = 7
    InternalLinkage = 8
    PrivateLinkage = 9
    DllImportLinkage = 10
    DllExportLinkage = 11
    ExternalWeakLinkage = 12
    GhostLinkage = 13
    CommonLinkage = 14
    LinkerPrivateLinkage = 15
    LinkerPrivateWeakLinkage = 16
  end
  fun set_linkage = LLVMSetLinkage(global : ValueRef, linkage : Linkage)
  fun get_section = LLVMGetSection(global : ValueRef) : LibC::Char*
  fun set_section = LLVMSetSection(global : ValueRef, section : LibC::Char*)
  fun get_visibility = LLVMGetVisibility(global : ValueRef) : Visibility
  enum Visibility
    DefaultVisibility = 0
    HiddenVisibility = 1
    ProtectedVisibility = 2
  end
  fun set_visibility = LLVMSetVisibility(global : ValueRef, viz : Visibility)
  fun get_dll_storage_class = LLVMGetDLLStorageClass(global : ValueRef) : DllStorageClass
  enum DllStorageClass
    DefaultStorageClass = 0
    DllImportStorageClass = 1
    DllExportStorageClass = 2
  end
  fun set_dll_storage_class = LLVMSetDLLStorageClass(global : ValueRef, class : DllStorageClass)
  fun get_unnamed_address = LLVMGetUnnamedAddress(global : ValueRef) : UnnamedAddr
  enum UnnamedAddr
    NoUnnamedAddr = 0
    LocalUnnamedAddr = 1
    GlobalUnnamedAddr = 2
  end
  fun set_unnamed_address = LLVMSetUnnamedAddress(global : ValueRef, unnamed_addr : UnnamedAddr)
  fun has_unnamed_addr = LLVMHasUnnamedAddr(global : ValueRef) : Bool
  fun set_unnamed_addr = LLVMSetUnnamedAddr(global : ValueRef, has_unnamed_addr : Bool)
  fun get_alignment = LLVMGetAlignment(v : ValueRef) : LibC::UInt
  fun set_alignment = LLVMSetAlignment(v : ValueRef, bytes : LibC::UInt)
  fun add_global = LLVMAddGlobal(m : ModuleRef, ty : TypeRef, name : LibC::Char*) : ValueRef
  fun add_global_in_address_space = LLVMAddGlobalInAddressSpace(m : ModuleRef, ty : TypeRef, name : LibC::Char*, address_space : LibC::UInt) : ValueRef
  fun get_named_global = LLVMGetNamedGlobal(m : ModuleRef, name : LibC::Char*) : ValueRef
  fun get_first_global = LLVMGetFirstGlobal(m : ModuleRef) : ValueRef
  fun get_last_global = LLVMGetLastGlobal(m : ModuleRef) : ValueRef
  fun get_next_global = LLVMGetNextGlobal(global_var : ValueRef) : ValueRef
  fun get_previous_global = LLVMGetPreviousGlobal(global_var : ValueRef) : ValueRef
  fun delete_global = LLVMDeleteGlobal(global_var : ValueRef)
  fun get_initializer = LLVMGetInitializer(global_var : ValueRef) : ValueRef
  fun set_initializer = LLVMSetInitializer(global_var : ValueRef, constant_val : ValueRef)
  fun is_thread_local = LLVMIsThreadLocal(global_var : ValueRef) : Bool
  fun set_thread_local = LLVMSetThreadLocal(global_var : ValueRef, is_thread_local : Bool)
  fun is_global_constant = LLVMIsGlobalConstant(global_var : ValueRef) : Bool
  fun set_global_constant = LLVMSetGlobalConstant(global_var : ValueRef, is_constant : Bool)
  fun get_thread_local_mode = LLVMGetThreadLocalMode(global_var : ValueRef) : ThreadLocalMode
  enum ThreadLocalMode
    NotThreadLocal = 0
    GeneralDynamicTlsModel = 1
    LocalDynamicTlsModel = 2
    InitialExecTlsModel = 3
    LocalExecTlsModel = 4
  end
  fun set_thread_local_mode = LLVMSetThreadLocalMode(global_var : ValueRef, mode : ThreadLocalMode)
  fun is_externally_initialized = LLVMIsExternallyInitialized(global_var : ValueRef) : Bool
  fun set_externally_initialized = LLVMSetExternallyInitialized(global_var : ValueRef, is_ext_init : Bool)
  fun add_alias = LLVMAddAlias(m : ModuleRef, ty : TypeRef, aliasee : ValueRef, name : LibC::Char*) : ValueRef
  fun get_named_global_alias = LLVMGetNamedGlobalAlias(m : ModuleRef, name : LibC::Char*, name_len : LibC::SizeT) : ValueRef
  fun get_first_global_alias = LLVMGetFirstGlobalAlias(m : ModuleRef) : ValueRef
  fun get_last_global_alias = LLVMGetLastGlobalAlias(m : ModuleRef) : ValueRef
  fun get_next_global_alias = LLVMGetNextGlobalAlias(ga : ValueRef) : ValueRef
  fun get_previous_global_alias = LLVMGetPreviousGlobalAlias(ga : ValueRef) : ValueRef
  fun alias_get_aliasee = LLVMAliasGetAliasee(alias : ValueRef) : ValueRef
  fun alias_set_aliasee = LLVMAliasSetAliasee(alias : ValueRef, aliasee : ValueRef)
  fun delete_function = LLVMDeleteFunction(fn : ValueRef)
  fun has_personality_fn = LLVMHasPersonalityFn(fn : ValueRef) : Bool
  fun get_personality_fn = LLVMGetPersonalityFn(fn : ValueRef) : ValueRef
  fun set_personality_fn = LLVMSetPersonalityFn(fn : ValueRef, personality_fn : ValueRef)
  fun get_intrinsic_id = LLVMGetIntrinsicID(fn : ValueRef) : LibC::UInt
  fun get_function_call_conv = LLVMGetFunctionCallConv(fn : ValueRef) : LibC::UInt
  fun set_function_call_conv = LLVMSetFunctionCallConv(fn : ValueRef, cc : LibC::UInt)
  fun get_gc = LLVMGetGC(fn : ValueRef) : LibC::Char*
  fun set_gc = LLVMSetGC(fn : ValueRef, name : LibC::Char*)
  fun add_attribute_at_index = LLVMAddAttributeAtIndex(f : ValueRef, idx : AttributeIndex, a : AttributeRef)
  alias AttributeIndex = LibC::UInt
  fun get_attribute_count_at_index = LLVMGetAttributeCountAtIndex(f : ValueRef, idx : AttributeIndex) : LibC::UInt
  fun get_attributes_at_index = LLVMGetAttributesAtIndex(f : ValueRef, idx : AttributeIndex, attrs : AttributeRef*)
  fun get_enum_attribute_at_index = LLVMGetEnumAttributeAtIndex(f : ValueRef, idx : AttributeIndex, kind_id : LibC::UInt) : AttributeRef
  fun get_string_attribute_at_index = LLVMGetStringAttributeAtIndex(f : ValueRef, idx : AttributeIndex, k : LibC::Char*, k_len : LibC::UInt) : AttributeRef
  fun remove_enum_attribute_at_index = LLVMRemoveEnumAttributeAtIndex(f : ValueRef, idx : AttributeIndex, kind_id : LibC::UInt)
  fun remove_string_attribute_at_index = LLVMRemoveStringAttributeAtIndex(f : ValueRef, idx : AttributeIndex, k : LibC::Char*, k_len : LibC::UInt)
  fun add_target_dependent_function_attr = LLVMAddTargetDependentFunctionAttr(fn : ValueRef, a : LibC::Char*, v : LibC::Char*)
  fun count_params = LLVMCountParams(fn : ValueRef) : LibC::UInt
  fun get_params = LLVMGetParams(fn : ValueRef, params : ValueRef*)
  fun get_param = LLVMGetParam(fn : ValueRef, index : LibC::UInt) : ValueRef
  fun get_param_parent = LLVMGetParamParent(inst : ValueRef) : ValueRef
  fun get_first_param = LLVMGetFirstParam(fn : ValueRef) : ValueRef
  fun get_last_param = LLVMGetLastParam(fn : ValueRef) : ValueRef
  fun get_next_param = LLVMGetNextParam(arg : ValueRef) : ValueRef
  fun get_previous_param = LLVMGetPreviousParam(arg : ValueRef) : ValueRef
  fun set_param_alignment = LLVMSetParamAlignment(arg : ValueRef, align : LibC::UInt)
  fun md_string_in_context = LLVMMDStringInContext(c : ContextRef, str : LibC::Char*, s_len : LibC::UInt) : ValueRef
  fun md_string = LLVMMDString(str : LibC::Char*, s_len : LibC::UInt) : ValueRef
  fun md_node_in_context = LLVMMDNodeInContext(c : ContextRef, vals : ValueRef*, count : LibC::UInt) : ValueRef
  fun md_node = LLVMMDNode(vals : ValueRef*, count : LibC::UInt) : ValueRef
  fun metadata_as_value = LLVMMetadataAsValue(c : ContextRef, md : MetadataRef) : ValueRef
  fun value_as_metadata = LLVMValueAsMetadata(val : ValueRef) : MetadataRef
  fun get_md_string = LLVMGetMDString(v : ValueRef, length : LibC::UInt*) : LibC::Char*
  fun get_md_node_num_operands = LLVMGetMDNodeNumOperands(v : ValueRef) : LibC::UInt
  fun get_md_node_operands = LLVMGetMDNodeOperands(v : ValueRef, dest : ValueRef*)
  fun basic_block_as_value = LLVMBasicBlockAsValue(bb : BasicBlockRef) : ValueRef
  fun value_is_basic_block = LLVMValueIsBasicBlock(val : ValueRef) : Bool
  fun value_as_basic_block = LLVMValueAsBasicBlock(val : ValueRef) : BasicBlockRef
  fun get_basic_block_name = LLVMGetBasicBlockName(bb : BasicBlockRef) : LibC::Char*
  fun get_basic_block_parent = LLVMGetBasicBlockParent(bb : BasicBlockRef) : ValueRef
  fun get_basic_block_terminator = LLVMGetBasicBlockTerminator(bb : BasicBlockRef) : ValueRef
  fun count_basic_blocks = LLVMCountBasicBlocks(fn : ValueRef) : LibC::UInt
  fun get_basic_blocks = LLVMGetBasicBlocks(fn : ValueRef, basic_blocks : BasicBlockRef*)
  fun get_first_basic_block = LLVMGetFirstBasicBlock(fn : ValueRef) : BasicBlockRef
  fun get_last_basic_block = LLVMGetLastBasicBlock(fn : ValueRef) : BasicBlockRef
  fun get_next_basic_block = LLVMGetNextBasicBlock(bb : BasicBlockRef) : BasicBlockRef
  fun get_previous_basic_block = LLVMGetPreviousBasicBlock(bb : BasicBlockRef) : BasicBlockRef
  fun get_entry_basic_block = LLVMGetEntryBasicBlock(fn : ValueRef) : BasicBlockRef
  fun append_basic_block_in_context = LLVMAppendBasicBlockInContext(c : ContextRef, fn : ValueRef, name : LibC::Char*) : BasicBlockRef
  fun append_basic_block = LLVMAppendBasicBlock(fn : ValueRef, name : LibC::Char*) : BasicBlockRef
  fun insert_basic_block_in_context = LLVMInsertBasicBlockInContext(c : ContextRef, bb : BasicBlockRef, name : LibC::Char*) : BasicBlockRef
  fun insert_basic_block = LLVMInsertBasicBlock(insert_before_bb : BasicBlockRef, name : LibC::Char*) : BasicBlockRef
  fun delete_basic_block = LLVMDeleteBasicBlock(bb : BasicBlockRef)
  fun remove_basic_block_from_parent = LLVMRemoveBasicBlockFromParent(bb : BasicBlockRef)
  fun move_basic_block_before = LLVMMoveBasicBlockBefore(bb : BasicBlockRef, move_pos : BasicBlockRef)
  fun move_basic_block_after = LLVMMoveBasicBlockAfter(bb : BasicBlockRef, move_pos : BasicBlockRef)
  fun get_first_instruction = LLVMGetFirstInstruction(bb : BasicBlockRef) : ValueRef
  fun get_last_instruction = LLVMGetLastInstruction(bb : BasicBlockRef) : ValueRef
  fun has_metadata = LLVMHasMetadata(val : ValueRef) : LibC::Int
  fun get_metadata = LLVMGetMetadata(val : ValueRef, kind_id : LibC::UInt) : ValueRef
  fun set_metadata = LLVMSetMetadata(val : ValueRef, kind_id : LibC::UInt, node : ValueRef)
  fun get_instruction_parent = LLVMGetInstructionParent(inst : ValueRef) : BasicBlockRef
  fun get_next_instruction = LLVMGetNextInstruction(inst : ValueRef) : ValueRef
  fun get_previous_instruction = LLVMGetPreviousInstruction(inst : ValueRef) : ValueRef
  fun instruction_remove_from_parent = LLVMInstructionRemoveFromParent(inst : ValueRef)
  fun instruction_erase_from_parent = LLVMInstructionEraseFromParent(inst : ValueRef)
  fun get_instruction_opcode = LLVMGetInstructionOpcode(inst : ValueRef) : Opcode
  fun get_i_cmp_predicate = LLVMGetICmpPredicate(inst : ValueRef) : IntPredicate
  fun get_f_cmp_predicate = LLVMGetFCmpPredicate(inst : ValueRef) : RealPredicate
  fun instruction_clone = LLVMInstructionClone(inst : ValueRef) : ValueRef
  fun get_num_arg_operands = LLVMGetNumArgOperands(instr : ValueRef) : LibC::UInt
  fun set_instruction_call_conv = LLVMSetInstructionCallConv(instr : ValueRef, cc : LibC::UInt)
  fun get_instruction_call_conv = LLVMGetInstructionCallConv(instr : ValueRef) : LibC::UInt
  fun set_instr_param_alignment = LLVMSetInstrParamAlignment(instr : ValueRef, index : LibC::UInt, align : LibC::UInt)
  fun add_call_site_attribute = LLVMAddCallSiteAttribute(c : ValueRef, idx : AttributeIndex, a : AttributeRef)
  fun get_call_site_attribute_count = LLVMGetCallSiteAttributeCount(c : ValueRef, idx : AttributeIndex) : LibC::UInt
  fun get_call_site_attributes = LLVMGetCallSiteAttributes(c : ValueRef, idx : AttributeIndex, attrs : AttributeRef*)
  fun get_call_site_enum_attribute = LLVMGetCallSiteEnumAttribute(c : ValueRef, idx : AttributeIndex, kind_id : LibC::UInt) : AttributeRef
  fun get_call_site_string_attribute = LLVMGetCallSiteStringAttribute(c : ValueRef, idx : AttributeIndex, k : LibC::Char*, k_len : LibC::UInt) : AttributeRef
  fun remove_call_site_enum_attribute = LLVMRemoveCallSiteEnumAttribute(c : ValueRef, idx : AttributeIndex, kind_id : LibC::UInt)
  fun remove_call_site_string_attribute = LLVMRemoveCallSiteStringAttribute(c : ValueRef, idx : AttributeIndex, k : LibC::Char*, k_len : LibC::UInt)
  fun get_called_value = LLVMGetCalledValue(instr : ValueRef) : ValueRef
  fun is_tail_call = LLVMIsTailCall(call_inst : ValueRef) : Bool
  fun set_tail_call = LLVMSetTailCall(call_inst : ValueRef, is_tail_call : Bool)
  fun get_normal_dest = LLVMGetNormalDest(invoke_inst : ValueRef) : BasicBlockRef
  fun get_unwind_dest = LLVMGetUnwindDest(invoke_inst : ValueRef) : BasicBlockRef
  fun set_normal_dest = LLVMSetNormalDest(invoke_inst : ValueRef, b : BasicBlockRef)
  fun set_unwind_dest = LLVMSetUnwindDest(invoke_inst : ValueRef, b : BasicBlockRef)
  fun get_num_successors = LLVMGetNumSuccessors(term : ValueRef) : LibC::UInt
  fun get_successor = LLVMGetSuccessor(term : ValueRef, i : LibC::UInt) : BasicBlockRef
  fun set_successor = LLVMSetSuccessor(term : ValueRef, i : LibC::UInt, block : BasicBlockRef)
  fun is_conditional = LLVMIsConditional(branch : ValueRef) : Bool
  fun get_condition = LLVMGetCondition(branch : ValueRef) : ValueRef
  fun set_condition = LLVMSetCondition(branch : ValueRef, cond : ValueRef)
  fun get_switch_default_dest = LLVMGetSwitchDefaultDest(switch_instr : ValueRef) : BasicBlockRef
  fun get_allocated_type = LLVMGetAllocatedType(alloca : ValueRef) : TypeRef
  fun is_in_bounds = LLVMIsInBounds(gep : ValueRef) : Bool
  fun set_is_in_bounds = LLVMSetIsInBounds(gep : ValueRef, in_bounds : Bool)
  fun add_incoming = LLVMAddIncoming(phi_node : ValueRef, incoming_values : ValueRef*, incoming_blocks : BasicBlockRef*, count : LibC::UInt)
  fun count_incoming = LLVMCountIncoming(phi_node : ValueRef) : LibC::UInt
  fun get_incoming_value = LLVMGetIncomingValue(phi_node : ValueRef, index : LibC::UInt) : ValueRef
  fun get_incoming_block = LLVMGetIncomingBlock(phi_node : ValueRef, index : LibC::UInt) : BasicBlockRef
  fun get_num_indices = LLVMGetNumIndices(inst : ValueRef) : LibC::UInt
  fun get_indices = LLVMGetIndices(inst : ValueRef) : LibC::UInt*
  fun create_builder_in_context = LLVMCreateBuilderInContext(c : ContextRef) : BuilderRef
  type BuilderRef = Void*
  fun create_builder = LLVMCreateBuilder : BuilderRef
  fun position_builder = LLVMPositionBuilder(builder : BuilderRef, block : BasicBlockRef, instr : ValueRef)
  fun position_builder_before = LLVMPositionBuilderBefore(builder : BuilderRef, instr : ValueRef)
  fun position_builder_at_end = LLVMPositionBuilderAtEnd(builder : BuilderRef, block : BasicBlockRef)
  fun get_insert_block = LLVMGetInsertBlock(builder : BuilderRef) : BasicBlockRef
  fun clear_insertion_position = LLVMClearInsertionPosition(builder : BuilderRef)
  fun insert_into_builder = LLVMInsertIntoBuilder(builder : BuilderRef, instr : ValueRef)
  fun insert_into_builder_with_name = LLVMInsertIntoBuilderWithName(builder : BuilderRef, instr : ValueRef, name : LibC::Char*)
  fun dispose_builder = LLVMDisposeBuilder(builder : BuilderRef)
  fun set_current_debug_location = LLVMSetCurrentDebugLocation(builder : BuilderRef, l : ValueRef)
  fun get_current_debug_location = LLVMGetCurrentDebugLocation(builder : BuilderRef) : ValueRef
  fun set_inst_debug_location = LLVMSetInstDebugLocation(builder : BuilderRef, inst : ValueRef)
  fun build_ret_void = LLVMBuildRetVoid(x0 : BuilderRef) : ValueRef
  fun build_ret = LLVMBuildRet(x0 : BuilderRef, v : ValueRef) : ValueRef
  fun build_aggregate_ret = LLVMBuildAggregateRet(x0 : BuilderRef, ret_vals : ValueRef*, n : LibC::UInt) : ValueRef
  fun build_br = LLVMBuildBr(x0 : BuilderRef, dest : BasicBlockRef) : ValueRef
  fun build_cond_br = LLVMBuildCondBr(x0 : BuilderRef, if : ValueRef, then : BasicBlockRef, else : BasicBlockRef) : ValueRef
  fun build_switch = LLVMBuildSwitch(x0 : BuilderRef, v : ValueRef, else : BasicBlockRef, num_cases : LibC::UInt) : ValueRef
  fun build_indirect_br = LLVMBuildIndirectBr(b : BuilderRef, addr : ValueRef, num_dests : LibC::UInt) : ValueRef
  fun build_invoke = LLVMBuildInvoke(x0 : BuilderRef, fn : ValueRef, args : ValueRef*, num_args : LibC::UInt, then : BasicBlockRef, catch : BasicBlockRef, name : LibC::Char*) : ValueRef
  fun build_unreachable = LLVMBuildUnreachable(x0 : BuilderRef) : ValueRef
  fun build_resume = LLVMBuildResume(b : BuilderRef, exn : ValueRef) : ValueRef
  fun build_landing_pad = LLVMBuildLandingPad(b : BuilderRef, ty : TypeRef, pers_fn : ValueRef, num_clauses : LibC::UInt, name : LibC::Char*) : ValueRef
  fun build_cleanup_ret = LLVMBuildCleanupRet(b : BuilderRef, catch_pad : ValueRef, bb : BasicBlockRef) : ValueRef
  fun build_catch_ret = LLVMBuildCatchRet(b : BuilderRef, catch_pad : ValueRef, bb : BasicBlockRef) : ValueRef
  fun build_catch_pad = LLVMBuildCatchPad(b : BuilderRef, parent_pad : ValueRef, args : ValueRef*, num_args : LibC::UInt, name : LibC::Char*) : ValueRef
  fun build_cleanup_pad = LLVMBuildCleanupPad(b : BuilderRef, parent_pad : ValueRef, args : ValueRef*, num_args : LibC::UInt, name : LibC::Char*) : ValueRef
  fun build_catch_switch = LLVMBuildCatchSwitch(b : BuilderRef, parent_pad : ValueRef, unwind_bb : BasicBlockRef, num_handlers : LibC::UInt, name : LibC::Char*) : ValueRef
  fun add_case = LLVMAddCase(switch : ValueRef, on_val : ValueRef, dest : BasicBlockRef)
  fun add_destination = LLVMAddDestination(indirect_br : ValueRef, dest : BasicBlockRef)
  fun get_num_clauses = LLVMGetNumClauses(landing_pad : ValueRef) : LibC::UInt
  fun get_clause = LLVMGetClause(landing_pad : ValueRef, idx : LibC::UInt) : ValueRef
  fun add_clause = LLVMAddClause(landing_pad : ValueRef, clause_val : ValueRef)
  fun is_cleanup = LLVMIsCleanup(landing_pad : ValueRef) : Bool
  fun set_cleanup = LLVMSetCleanup(landing_pad : ValueRef, val : Bool)
  fun add_handler = LLVMAddHandler(catch_switch : ValueRef, dest : BasicBlockRef)
  fun get_num_handlers = LLVMGetNumHandlers(catch_switch : ValueRef) : LibC::UInt
  fun get_handlers = LLVMGetHandlers(catch_switch : ValueRef, handlers : BasicBlockRef*)
  fun get_arg_operand = LLVMGetArgOperand(funclet : ValueRef, i : LibC::UInt) : ValueRef
  fun set_arg_operand = LLVMSetArgOperand(funclet : ValueRef, i : LibC::UInt, value : ValueRef)
  fun get_parent_catch_switch = LLVMGetParentCatchSwitch(catch_pad : ValueRef) : ValueRef
  fun set_parent_catch_switch = LLVMSetParentCatchSwitch(catch_pad : ValueRef, catch_switch : ValueRef)
  fun build_add = LLVMBuildAdd(x0 : BuilderRef, lhs : ValueRef, rhs : ValueRef, name : LibC::Char*) : ValueRef
  fun build_nsw_add = LLVMBuildNSWAdd(x0 : BuilderRef, lhs : ValueRef, rhs : ValueRef, name : LibC::Char*) : ValueRef
  fun build_nuw_add = LLVMBuildNUWAdd(x0 : BuilderRef, lhs : ValueRef, rhs : ValueRef, name : LibC::Char*) : ValueRef
  fun build_f_add = LLVMBuildFAdd(x0 : BuilderRef, lhs : ValueRef, rhs : ValueRef, name : LibC::Char*) : ValueRef
  fun build_sub = LLVMBuildSub(x0 : BuilderRef, lhs : ValueRef, rhs : ValueRef, name : LibC::Char*) : ValueRef
  fun build_nsw_sub = LLVMBuildNSWSub(x0 : BuilderRef, lhs : ValueRef, rhs : ValueRef, name : LibC::Char*) : ValueRef
  fun build_nuw_sub = LLVMBuildNUWSub(x0 : BuilderRef, lhs : ValueRef, rhs : ValueRef, name : LibC::Char*) : ValueRef
  fun build_f_sub = LLVMBuildFSub(x0 : BuilderRef, lhs : ValueRef, rhs : ValueRef, name : LibC::Char*) : ValueRef
  fun build_mul = LLVMBuildMul(x0 : BuilderRef, lhs : ValueRef, rhs : ValueRef, name : LibC::Char*) : ValueRef
  fun build_nsw_mul = LLVMBuildNSWMul(x0 : BuilderRef, lhs : ValueRef, rhs : ValueRef, name : LibC::Char*) : ValueRef
  fun build_nuw_mul = LLVMBuildNUWMul(x0 : BuilderRef, lhs : ValueRef, rhs : ValueRef, name : LibC::Char*) : ValueRef
  fun build_f_mul = LLVMBuildFMul(x0 : BuilderRef, lhs : ValueRef, rhs : ValueRef, name : LibC::Char*) : ValueRef
  fun build_u_div = LLVMBuildUDiv(x0 : BuilderRef, lhs : ValueRef, rhs : ValueRef, name : LibC::Char*) : ValueRef
  fun build_exact_u_div = LLVMBuildExactUDiv(x0 : BuilderRef, lhs : ValueRef, rhs : ValueRef, name : LibC::Char*) : ValueRef
  fun build_s_div = LLVMBuildSDiv(x0 : BuilderRef, lhs : ValueRef, rhs : ValueRef, name : LibC::Char*) : ValueRef
  fun build_exact_s_div = LLVMBuildExactSDiv(x0 : BuilderRef, lhs : ValueRef, rhs : ValueRef, name : LibC::Char*) : ValueRef
  fun build_f_div = LLVMBuildFDiv(x0 : BuilderRef, lhs : ValueRef, rhs : ValueRef, name : LibC::Char*) : ValueRef
  fun build_u_rem = LLVMBuildURem(x0 : BuilderRef, lhs : ValueRef, rhs : ValueRef, name : LibC::Char*) : ValueRef
  fun build_s_rem = LLVMBuildSRem(x0 : BuilderRef, lhs : ValueRef, rhs : ValueRef, name : LibC::Char*) : ValueRef
  fun build_f_rem = LLVMBuildFRem(x0 : BuilderRef, lhs : ValueRef, rhs : ValueRef, name : LibC::Char*) : ValueRef
  fun build_shl = LLVMBuildShl(x0 : BuilderRef, lhs : ValueRef, rhs : ValueRef, name : LibC::Char*) : ValueRef
  fun build_l_shr = LLVMBuildLShr(x0 : BuilderRef, lhs : ValueRef, rhs : ValueRef, name : LibC::Char*) : ValueRef
  fun build_a_shr = LLVMBuildAShr(x0 : BuilderRef, lhs : ValueRef, rhs : ValueRef, name : LibC::Char*) : ValueRef
  fun build_and = LLVMBuildAnd(x0 : BuilderRef, lhs : ValueRef, rhs : ValueRef, name : LibC::Char*) : ValueRef
  fun build_or = LLVMBuildOr(x0 : BuilderRef, lhs : ValueRef, rhs : ValueRef, name : LibC::Char*) : ValueRef
  fun build_xor = LLVMBuildXor(x0 : BuilderRef, lhs : ValueRef, rhs : ValueRef, name : LibC::Char*) : ValueRef
  fun build_bin_op = LLVMBuildBinOp(b : BuilderRef, op : Opcode, lhs : ValueRef, rhs : ValueRef, name : LibC::Char*) : ValueRef
  fun build_neg = LLVMBuildNeg(x0 : BuilderRef, v : ValueRef, name : LibC::Char*) : ValueRef
  fun build_nsw_neg = LLVMBuildNSWNeg(b : BuilderRef, v : ValueRef, name : LibC::Char*) : ValueRef
  fun build_nuw_neg = LLVMBuildNUWNeg(b : BuilderRef, v : ValueRef, name : LibC::Char*) : ValueRef
  fun build_f_neg = LLVMBuildFNeg(x0 : BuilderRef, v : ValueRef, name : LibC::Char*) : ValueRef
  fun build_not = LLVMBuildNot(x0 : BuilderRef, v : ValueRef, name : LibC::Char*) : ValueRef
  fun build_malloc = LLVMBuildMalloc(x0 : BuilderRef, ty : TypeRef, name : LibC::Char*) : ValueRef
  fun build_array_malloc = LLVMBuildArrayMalloc(x0 : BuilderRef, ty : TypeRef, val : ValueRef, name : LibC::Char*) : ValueRef
  fun build_alloca = LLVMBuildAlloca(x0 : BuilderRef, ty : TypeRef, name : LibC::Char*) : ValueRef
  fun build_array_alloca = LLVMBuildArrayAlloca(x0 : BuilderRef, ty : TypeRef, val : ValueRef, name : LibC::Char*) : ValueRef
  fun build_free = LLVMBuildFree(x0 : BuilderRef, pointer_val : ValueRef) : ValueRef
  fun build_load = LLVMBuildLoad(x0 : BuilderRef, pointer_val : ValueRef, name : LibC::Char*) : ValueRef
  fun build_store = LLVMBuildStore(x0 : BuilderRef, val : ValueRef, ptr : ValueRef) : ValueRef
  fun build_gep = LLVMBuildGEP(b : BuilderRef, pointer : ValueRef, indices : ValueRef*, num_indices : LibC::UInt, name : LibC::Char*) : ValueRef
  fun build_in_bounds_gep = LLVMBuildInBoundsGEP(b : BuilderRef, pointer : ValueRef, indices : ValueRef*, num_indices : LibC::UInt, name : LibC::Char*) : ValueRef
  fun build_struct_gep = LLVMBuildStructGEP(b : BuilderRef, pointer : ValueRef, idx : LibC::UInt, name : LibC::Char*) : ValueRef
  fun build_global_string = LLVMBuildGlobalString(b : BuilderRef, str : LibC::Char*, name : LibC::Char*) : ValueRef
  fun build_global_string_ptr = LLVMBuildGlobalStringPtr(b : BuilderRef, str : LibC::Char*, name : LibC::Char*) : ValueRef
  fun get_volatile = LLVMGetVolatile(memory_access_inst : ValueRef) : Bool
  fun set_volatile = LLVMSetVolatile(memory_access_inst : ValueRef, is_volatile : Bool)
  fun get_ordering = LLVMGetOrdering(memory_access_inst : ValueRef) : AtomicOrdering
  enum AtomicOrdering
    AtomicOrderingNotAtomic = 0
    AtomicOrderingUnordered = 1
    AtomicOrderingMonotonic = 2
    AtomicOrderingAcquire = 4
    AtomicOrderingRelease = 5
    AtomicOrderingAcquireRelease = 6
    AtomicOrderingSequentiallyConsistent = 7
  end
  fun set_ordering = LLVMSetOrdering(memory_access_inst : ValueRef, ordering : AtomicOrdering)
  fun build_trunc = LLVMBuildTrunc(x0 : BuilderRef, val : ValueRef, dest_ty : TypeRef, name : LibC::Char*) : ValueRef
  fun build_z_ext = LLVMBuildZExt(x0 : BuilderRef, val : ValueRef, dest_ty : TypeRef, name : LibC::Char*) : ValueRef
  fun build_s_ext = LLVMBuildSExt(x0 : BuilderRef, val : ValueRef, dest_ty : TypeRef, name : LibC::Char*) : ValueRef
  fun build_fp_to_ui = LLVMBuildFPToUI(x0 : BuilderRef, val : ValueRef, dest_ty : TypeRef, name : LibC::Char*) : ValueRef
  fun build_fp_to_si = LLVMBuildFPToSI(x0 : BuilderRef, val : ValueRef, dest_ty : TypeRef, name : LibC::Char*) : ValueRef
  fun build_ui_to_fp = LLVMBuildUIToFP(x0 : BuilderRef, val : ValueRef, dest_ty : TypeRef, name : LibC::Char*) : ValueRef
  fun build_si_to_fp = LLVMBuildSIToFP(x0 : BuilderRef, val : ValueRef, dest_ty : TypeRef, name : LibC::Char*) : ValueRef
  fun build_fp_trunc = LLVMBuildFPTrunc(x0 : BuilderRef, val : ValueRef, dest_ty : TypeRef, name : LibC::Char*) : ValueRef
  fun build_fp_ext = LLVMBuildFPExt(x0 : BuilderRef, val : ValueRef, dest_ty : TypeRef, name : LibC::Char*) : ValueRef
  fun build_ptr_to_int = LLVMBuildPtrToInt(x0 : BuilderRef, val : ValueRef, dest_ty : TypeRef, name : LibC::Char*) : ValueRef
  fun build_int_to_ptr = LLVMBuildIntToPtr(x0 : BuilderRef, val : ValueRef, dest_ty : TypeRef, name : LibC::Char*) : ValueRef
  fun build_bit_cast = LLVMBuildBitCast(x0 : BuilderRef, val : ValueRef, dest_ty : TypeRef, name : LibC::Char*) : ValueRef
  fun build_addr_space_cast = LLVMBuildAddrSpaceCast(x0 : BuilderRef, val : ValueRef, dest_ty : TypeRef, name : LibC::Char*) : ValueRef
  fun build_z_ext_or_bit_cast = LLVMBuildZExtOrBitCast(x0 : BuilderRef, val : ValueRef, dest_ty : TypeRef, name : LibC::Char*) : ValueRef
  fun build_s_ext_or_bit_cast = LLVMBuildSExtOrBitCast(x0 : BuilderRef, val : ValueRef, dest_ty : TypeRef, name : LibC::Char*) : ValueRef
  fun build_trunc_or_bit_cast = LLVMBuildTruncOrBitCast(x0 : BuilderRef, val : ValueRef, dest_ty : TypeRef, name : LibC::Char*) : ValueRef
  fun build_cast = LLVMBuildCast(b : BuilderRef, op : Opcode, val : ValueRef, dest_ty : TypeRef, name : LibC::Char*) : ValueRef
  fun build_pointer_cast = LLVMBuildPointerCast(x0 : BuilderRef, val : ValueRef, dest_ty : TypeRef, name : LibC::Char*) : ValueRef
  fun build_int_cast = LLVMBuildIntCast(x0 : BuilderRef, val : ValueRef, dest_ty : TypeRef, name : LibC::Char*) : ValueRef
  fun build_fp_cast = LLVMBuildFPCast(x0 : BuilderRef, val : ValueRef, dest_ty : TypeRef, name : LibC::Char*) : ValueRef
  fun build_i_cmp = LLVMBuildICmp(x0 : BuilderRef, op : IntPredicate, lhs : ValueRef, rhs : ValueRef, name : LibC::Char*) : ValueRef
  fun build_f_cmp = LLVMBuildFCmp(x0 : BuilderRef, op : RealPredicate, lhs : ValueRef, rhs : ValueRef, name : LibC::Char*) : ValueRef
  fun build_phi = LLVMBuildPhi(x0 : BuilderRef, ty : TypeRef, name : LibC::Char*) : ValueRef
  fun build_call = LLVMBuildCall(x0 : BuilderRef, fn : ValueRef, args : ValueRef*, num_args : LibC::UInt, name : LibC::Char*) : ValueRef
  fun build_select = LLVMBuildSelect(x0 : BuilderRef, if : ValueRef, then : ValueRef, else : ValueRef, name : LibC::Char*) : ValueRef
  fun build_va_arg = LLVMBuildVAArg(x0 : BuilderRef, list : ValueRef, ty : TypeRef, name : LibC::Char*) : ValueRef
  fun build_extract_element = LLVMBuildExtractElement(x0 : BuilderRef, vec_val : ValueRef, index : ValueRef, name : LibC::Char*) : ValueRef
  fun build_insert_element = LLVMBuildInsertElement(x0 : BuilderRef, vec_val : ValueRef, elt_val : ValueRef, index : ValueRef, name : LibC::Char*) : ValueRef
  fun build_shuffle_vector = LLVMBuildShuffleVector(x0 : BuilderRef, v1 : ValueRef, v2 : ValueRef, mask : ValueRef, name : LibC::Char*) : ValueRef
  fun build_extract_value = LLVMBuildExtractValue(x0 : BuilderRef, agg_val : ValueRef, index : LibC::UInt, name : LibC::Char*) : ValueRef
  fun build_insert_value = LLVMBuildInsertValue(x0 : BuilderRef, agg_val : ValueRef, elt_val : ValueRef, index : LibC::UInt, name : LibC::Char*) : ValueRef
  fun build_is_null = LLVMBuildIsNull(x0 : BuilderRef, val : ValueRef, name : LibC::Char*) : ValueRef
  fun build_is_not_null = LLVMBuildIsNotNull(x0 : BuilderRef, val : ValueRef, name : LibC::Char*) : ValueRef
  fun build_ptr_diff = LLVMBuildPtrDiff(x0 : BuilderRef, lhs : ValueRef, rhs : ValueRef, name : LibC::Char*) : ValueRef
  fun build_fence = LLVMBuildFence(b : BuilderRef, ordering : AtomicOrdering, single_thread : Bool, name : LibC::Char*) : ValueRef
  fun build_atomic_rmw = LLVMBuildAtomicRMW(b : BuilderRef, op : AtomicRmwBinOp, ptr : ValueRef, val : ValueRef, ordering : AtomicOrdering, single_thread : Bool) : ValueRef
  enum AtomicRmwBinOp
    AtomicRmwBinOpXchg = 0
    AtomicRmwBinOpAdd = 1
    AtomicRmwBinOpSub = 2
    AtomicRmwBinOpAnd = 3
    AtomicRmwBinOpNand = 4
    AtomicRmwBinOpOr = 5
    AtomicRmwBinOpXor = 6
    AtomicRmwBinOpMax = 7
    AtomicRmwBinOpMin = 8
    AtomicRmwBinOpUMax = 9
    AtomicRmwBinOpUMin = 10
  end
  fun build_atomic_cmp_xchg = LLVMBuildAtomicCmpXchg(b : BuilderRef, ptr : ValueRef, cmp : ValueRef, new : ValueRef, success_ordering : AtomicOrdering, failure_ordering : AtomicOrdering, single_thread : Bool) : ValueRef
  fun is_atomic_single_thread = LLVMIsAtomicSingleThread(atomic_inst : ValueRef) : Bool
  fun set_atomic_single_thread = LLVMSetAtomicSingleThread(atomic_inst : ValueRef, single_thread : Bool)
  fun get_cmp_xchg_success_ordering = LLVMGetCmpXchgSuccessOrdering(cmp_xchg_inst : ValueRef) : AtomicOrdering
  fun set_cmp_xchg_success_ordering = LLVMSetCmpXchgSuccessOrdering(cmp_xchg_inst : ValueRef, ordering : AtomicOrdering)
  fun get_cmp_xchg_failure_ordering = LLVMGetCmpXchgFailureOrdering(cmp_xchg_inst : ValueRef) : AtomicOrdering
  fun set_cmp_xchg_failure_ordering = LLVMSetCmpXchgFailureOrdering(cmp_xchg_inst : ValueRef, ordering : AtomicOrdering)
  fun create_module_provider_for_existing_module = LLVMCreateModuleProviderForExistingModule(m : ModuleRef) : ModuleProviderRef
  type ModuleProviderRef = Void*
  fun dispose_module_provider = LLVMDisposeModuleProvider(m : ModuleProviderRef)
  fun create_memory_buffer_with_contents_of_file = LLVMCreateMemoryBufferWithContentsOfFile(path : LibC::Char*, out_mem_buf : MemoryBufferRef*, out_message : LibC::Char**) : Bool
  type MemoryBufferRef = Void*
  fun create_memory_buffer_with_stdin = LLVMCreateMemoryBufferWithSTDIN(out_mem_buf : MemoryBufferRef*, out_message : LibC::Char**) : Bool
  fun create_memory_buffer_with_memory_range = LLVMCreateMemoryBufferWithMemoryRange(input_data : LibC::Char*, input_data_length : LibC::SizeT, buffer_name : LibC::Char*, requires_null_terminator : Bool) : MemoryBufferRef
  fun create_memory_buffer_with_memory_range_copy = LLVMCreateMemoryBufferWithMemoryRangeCopy(input_data : LibC::Char*, input_data_length : LibC::SizeT, buffer_name : LibC::Char*) : MemoryBufferRef
  fun get_buffer_start = LLVMGetBufferStart(mem_buf : MemoryBufferRef) : LibC::Char*
  fun get_buffer_size = LLVMGetBufferSize(mem_buf : MemoryBufferRef) : LibC::SizeT
  fun dispose_memory_buffer = LLVMDisposeMemoryBuffer(mem_buf : MemoryBufferRef)
  fun get_global_pass_registry = LLVMGetGlobalPassRegistry : PassRegistryRef
  fun create_pass_manager = LLVMCreatePassManager : PassManagerRef
  type PassManagerRef = Void*
  fun create_function_pass_manager_for_module = LLVMCreateFunctionPassManagerForModule(m : ModuleRef) : PassManagerRef
  fun create_function_pass_manager = LLVMCreateFunctionPassManager(mp : ModuleProviderRef) : PassManagerRef
  fun run_pass_manager = LLVMRunPassManager(pm : PassManagerRef, m : ModuleRef) : Bool
  fun initialize_function_pass_manager = LLVMInitializeFunctionPassManager(fpm : PassManagerRef) : Bool
  fun run_function_pass_manager = LLVMRunFunctionPassManager(fpm : PassManagerRef, f : ValueRef) : Bool
  fun finalize_function_pass_manager = LLVMFinalizeFunctionPassManager(fpm : PassManagerRef) : Bool
  fun dispose_pass_manager = LLVMDisposePassManager(pm : PassManagerRef)
  fun start_multithreaded = LLVMStartMultithreaded : Bool
  fun stop_multithreaded = LLVMStopMultithreaded
  fun is_multithreaded = LLVMIsMultithreaded : Bool
  fun parse_bitcode = LLVMParseBitcode(mem_buf : MemoryBufferRef, out_module : ModuleRef*, out_message : LibC::Char**) : Bool
  fun parse_bitcode2 = LLVMParseBitcode2(mem_buf : MemoryBufferRef, out_module : ModuleRef*) : Bool
  fun parse_bitcode_in_context = LLVMParseBitcodeInContext(context_ref : ContextRef, mem_buf : MemoryBufferRef, out_module : ModuleRef*, out_message : LibC::Char**) : Bool
  fun parse_bitcode_in_context2 = LLVMParseBitcodeInContext2(context_ref : ContextRef, mem_buf : MemoryBufferRef, out_module : ModuleRef*) : Bool
  fun get_bitcode_module_in_context = LLVMGetBitcodeModuleInContext(context_ref : ContextRef, mem_buf : MemoryBufferRef, out_m : ModuleRef*, out_message : LibC::Char**) : Bool
  fun get_bitcode_module_in_context2 = LLVMGetBitcodeModuleInContext2(context_ref : ContextRef, mem_buf : MemoryBufferRef, out_m : ModuleRef*) : Bool
  fun get_bitcode_module = LLVMGetBitcodeModule(mem_buf : MemoryBufferRef, out_m : ModuleRef*, out_message : LibC::Char**) : Bool
  fun get_bitcode_module2 = LLVMGetBitcodeModule2(mem_buf : MemoryBufferRef, out_m : ModuleRef*) : Bool
end

